{"ast":null,"code":"const utils = require('./utils');\n\nconst model = require('../model/rss');\n\nconst namespaces = require('./namespaces');\n\nconst itunesParser = require('./itunes');\n\nconst getChannelTitle = node => utils.getElementTextContent(node, 'title');\n\nconst getChannelLinks = node => {\n  const links = utils.getChildElements(node, 'link');\n  return links.map(link => ({\n    url: link.textContent,\n    rel: link.getAttribute('rel')\n  }));\n};\n\nconst getChannelDescription = node => utils.getElementTextContent(node, 'description');\n\nconst getChannelLanguage = node => utils.getElementTextContent(node, 'language');\n\nconst getChannelCopyright = node => utils.getElementTextContent(node, 'copyright');\n\nconst getChannelAuthors = node => {\n  const authors = utils.getElementTextContentArray(node, 'managingEditor');\n  return authors.map(author => ({\n    name: author\n  }));\n};\n\nconst getChannelLastUpdated = node => utils.getElementTextContent(node, 'lastBuildDate');\n\nconst getChannelLastPublished = node => utils.getElementTextContent(node, 'pubDate');\n\nconst getChannelCategories = node => {\n  const categories = utils.getElementTextContentArray(node, 'category');\n  return categories.map(category => ({\n    name: category\n  }));\n};\n\nconst getChannelImage = node => {\n  const imageNodes = utils.getChildElements(node, 'image');\n\n  if (imageNodes.length === 0) {\n    return {\n      url: undefined,\n      title: undefined,\n      description: undefined,\n      width: undefined,\n      height: undefined\n    };\n  }\n\n  const imageNode = imageNodes[0];\n  return {\n    url: utils.getElementTextContent(imageNode, 'url'),\n    title: utils.getElementTextContent(imageNode, 'title'),\n    description: utils.getElementTextContent(imageNode, 'description'),\n    width: utils.getElementTextContent(imageNode, 'width'),\n    height: utils.getElementTextContent(imageNode, 'height')\n  };\n};\n\nconst getItemTitle = node => utils.getElementTextContent(node, 'title');\n\nconst getItemLinks = node => {\n  const links = utils.getChildElements(node, 'link');\n  return links.map(link => ({\n    url: link.textContent,\n    rel: link.getAttribute('rel')\n  }));\n};\n\nconst getItemDescription = node => utils.getElementTextContent(node, 'description');\n\nconst getItemContent = node => utils.getElementTextContent(node, 'encoded', namespaces.content);\n\nconst getItemAuthors = node => {\n  let authors = utils.getElementTextContentArray(node, 'author');\n\n  if (authors.length === 0) {\n    authors = utils.getElementTextContentArray(node, 'dc:creator');\n  }\n\n  return authors.map(author => ({\n    name: author\n  }));\n};\n\nconst getItemCategories = node => {\n  let categories = utils.getElementTextContentArray(node, 'category');\n\n  if (categories.length === 0) {\n    categories = utils.getElementTextContentArray(node, 'dc:subject');\n  }\n\n  return categories.map(category => ({\n    name: category\n  }));\n};\n\nconst getItemId = node => utils.getElementTextContent(node, 'guid');\n\nconst getItemPublished = node => utils.getElementTextContent(node, 'pubDate') || utils.getElementTextContent(node, 'dc:date');\n\nconst getItemEnclosures = node => {\n  const enclosures = utils.getChildElements(node, 'enclosure');\n  return enclosures.map(enclosure => ({\n    url: enclosure.getAttribute('url'),\n    length: enclosure.getAttribute('length'),\n    mimeType: enclosure.getAttribute('type')\n  }));\n};\n\nconst mapChannelFields = document => {\n  const channelNodes = utils.getElements(document, 'channel');\n\n  if (!channelNodes || channelNodes.length === 0) {\n    throw new Error('Could not find channel node');\n  }\n\n  const channelNode = channelNodes[0];\n  return {\n    title: getChannelTitle(channelNode),\n    links: getChannelLinks(channelNode),\n    description: getChannelDescription(channelNode),\n    language: getChannelLanguage(channelNode),\n    copyright: getChannelCopyright(channelNode),\n    authors: getChannelAuthors(channelNode),\n    lastUpdated: getChannelLastUpdated(channelNode),\n    lastPublished: getChannelLastPublished(channelNode),\n    categories: getChannelCategories(channelNode),\n    image: getChannelImage(channelNode),\n    itunes: itunesParser.parseChannel(channelNode)\n  };\n};\n\nconst mapItems = document => {\n  const itemNodes = utils.getElements(document, 'item');\n  return itemNodes.map(item => ({\n    title: getItemTitle(item),\n    links: getItemLinks(item),\n    description: getItemDescription(item),\n    content: getItemContent(item),\n    id: getItemId(item),\n    authors: getItemAuthors(item),\n    categories: getItemCategories(item),\n    published: getItemPublished(item),\n    enclosures: getItemEnclosures(item),\n    itunes: itunesParser.parseItem(item)\n  }));\n};\n\nexports.parse = document => ({ ...model.rss,\n  type: 'rss-v2',\n  ...mapChannelFields(document),\n  items: mapItems(document)\n});","map":{"version":3,"sources":["D:/GIT/Plateforme_EsportV2/Front/node_modules/react-native-rss-parser/parsers/rssv2.js"],"names":["utils","require","model","namespaces","itunesParser","getChannelTitle","node","getElementTextContent","getChannelLinks","links","getChildElements","map","link","url","textContent","rel","getAttribute","getChannelDescription","getChannelLanguage","getChannelCopyright","getChannelAuthors","authors","getElementTextContentArray","author","name","getChannelLastUpdated","getChannelLastPublished","getChannelCategories","categories","category","getChannelImage","imageNodes","length","undefined","title","description","width","height","imageNode","getItemTitle","getItemLinks","getItemDescription","getItemContent","content","getItemAuthors","getItemCategories","getItemId","getItemPublished","getItemEnclosures","enclosures","enclosure","mimeType","mapChannelFields","document","channelNodes","getElements","Error","channelNode","language","copyright","lastUpdated","lastPublished","image","itunes","parseChannel","mapItems","itemNodes","item","id","published","parseItem","exports","parse","rss","type","items"],"mappings":"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","sourcesContent":["const utils = require('./utils');\r\nconst model = require('../model/rss');\r\nconst namespaces = require('./namespaces');\r\nconst itunesParser = require('./itunes');\r\n\r\nconst getChannelTitle = (node) => utils.getElementTextContent(node, 'title');\r\n\r\nconst getChannelLinks = (node) => {\r\n  const links = utils.getChildElements(node, 'link');\r\n\r\n  return links.map((link) => ({\r\n    url: link.textContent,\r\n    rel: link.getAttribute('rel'),\r\n  }));\r\n};\r\n\r\nconst getChannelDescription = (node) =>\r\n  utils.getElementTextContent(node, 'description');\r\n\r\nconst getChannelLanguage = (node) =>\r\n  utils.getElementTextContent(node, 'language');\r\n\r\nconst getChannelCopyright = (node) =>\r\n  utils.getElementTextContent(node, 'copyright');\r\n\r\nconst getChannelAuthors = (node) => {\r\n  const authors = utils.getElementTextContentArray(node, 'managingEditor');\r\n\r\n  return authors.map((author) => ({\r\n    name: author,\r\n  }));\r\n};\r\n\r\nconst getChannelLastUpdated = (node) =>\r\n  utils.getElementTextContent(node, 'lastBuildDate');\r\n\r\nconst getChannelLastPublished = (node) =>\r\n  utils.getElementTextContent(node, 'pubDate');\r\n\r\nconst getChannelCategories = (node) => {\r\n  const categories = utils.getElementTextContentArray(node, 'category');\r\n\r\n  return categories.map((category) => ({\r\n    name: category,\r\n  }));\r\n};\r\n\r\nconst getChannelImage = (node) => {\r\n  const imageNodes = utils.getChildElements(node, 'image');\r\n\r\n  if (imageNodes.length === 0) {\r\n    return {\r\n      url: undefined,\r\n      title: undefined,\r\n      description: undefined,\r\n      width: undefined,\r\n      height: undefined,\r\n    };\r\n  }\r\n\r\n  const imageNode = imageNodes[0];\r\n\r\n  return {\r\n    url: utils.getElementTextContent(imageNode, 'url'),\r\n    title: utils.getElementTextContent(imageNode, 'title'),\r\n    description: utils.getElementTextContent(imageNode, 'description'),\r\n    width: utils.getElementTextContent(imageNode, 'width'),\r\n    height: utils.getElementTextContent(imageNode, 'height'),\r\n  };\r\n};\r\n\r\nconst getItemTitle = (node) => utils.getElementTextContent(node, 'title');\r\n\r\nconst getItemLinks = (node) => {\r\n  const links = utils.getChildElements(node, 'link');\r\n\r\n  return links.map((link) => ({\r\n    url: link.textContent,\r\n    rel: link.getAttribute('rel'),\r\n  }));\r\n};\r\n\r\nconst getItemDescription = (node) =>\r\n  utils.getElementTextContent(node, 'description');\r\n\r\nconst getItemContent = (node) =>\r\n  utils.getElementTextContent(node, 'encoded', namespaces.content);\r\n\r\nconst getItemAuthors = (node) => {\r\n  let authors = utils.getElementTextContentArray(node, 'author');\r\n\r\n  if (authors.length === 0) {\r\n    authors = utils.getElementTextContentArray(node, 'dc:creator');\r\n  }\r\n\r\n  return authors.map((author) => ({\r\n    name: author,\r\n  }));\r\n};\r\n\r\nconst getItemCategories = (node) => {\r\n  let categories = utils.getElementTextContentArray(node, 'category');\r\n\r\n  if (categories.length === 0) {\r\n    categories = utils.getElementTextContentArray(node, 'dc:subject');\r\n  }\r\n\r\n  return categories.map((category) => ({\r\n    name: category,\r\n  }));\r\n};\r\n\r\nconst getItemId = (node) => utils.getElementTextContent(node, 'guid');\r\n\r\nconst getItemPublished = (node) =>\r\n  utils.getElementTextContent(node, 'pubDate') ||\r\n  utils.getElementTextContent(node, 'dc:date');\r\n\r\nconst getItemEnclosures = (node) => {\r\n  const enclosures = utils.getChildElements(node, 'enclosure');\r\n\r\n  return enclosures.map((enclosure) => ({\r\n    url: enclosure.getAttribute('url'),\r\n    length: enclosure.getAttribute('length'),\r\n    mimeType: enclosure.getAttribute('type'),\r\n  }));\r\n};\r\n\r\nconst mapChannelFields = (document) => {\r\n  const channelNodes = utils.getElements(document, 'channel');\r\n\r\n  if (!channelNodes || channelNodes.length === 0) {\r\n    throw new Error('Could not find channel node');\r\n  }\r\n\r\n  const channelNode = channelNodes[0];\r\n\r\n  return {\r\n    title: getChannelTitle(channelNode),\r\n    links: getChannelLinks(channelNode),\r\n    description: getChannelDescription(channelNode),\r\n    language: getChannelLanguage(channelNode),\r\n    copyright: getChannelCopyright(channelNode),\r\n    authors: getChannelAuthors(channelNode),\r\n    lastUpdated: getChannelLastUpdated(channelNode),\r\n    lastPublished: getChannelLastPublished(channelNode),\r\n    categories: getChannelCategories(channelNode),\r\n    image: getChannelImage(channelNode),\r\n    itunes: itunesParser.parseChannel(channelNode),\r\n  };\r\n};\r\n\r\nconst mapItems = (document) => {\r\n  const itemNodes = utils.getElements(document, 'item');\r\n\r\n  return itemNodes.map((item) => ({\r\n    title: getItemTitle(item),\r\n    links: getItemLinks(item),\r\n    description: getItemDescription(item),\r\n    content: getItemContent(item),\r\n    id: getItemId(item),\r\n    authors: getItemAuthors(item),\r\n    categories: getItemCategories(item),\r\n    published: getItemPublished(item),\r\n    enclosures: getItemEnclosures(item),\r\n    itunes: itunesParser.parseItem(item),\r\n  }));\r\n};\r\n\r\nexports.parse = (document) => ({\r\n  ...model.rss,\r\n  type: 'rss-v2',\r\n  ...mapChannelFields(document),\r\n  items: mapItems(document),\r\n});\r\n"]},"metadata":{},"sourceType":"script"}