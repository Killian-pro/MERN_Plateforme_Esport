{"ast":null,"code":"const utils = require('./utils');\n\nconst model = require('../model/rss');\n\nconst itunesParser = require('./itunes');\n\nconst getChannelTitle = node => utils.getElementTextContent(node, 'title');\n\nconst getChannelLinks = node => {\n  const links = utils.getChildElements(node, 'link');\n  return links.map(link => ({\n    url: link.getAttribute('href'),\n    rel: link.getAttribute('rel')\n  }));\n};\n\nconst getChannelDescription = node => utils.getElementTextContent(node, 'subtitle');\n\nconst getChannelCopyright = node => utils.getElementTextContent(node, 'rights');\n\nconst getChannelAuthors = node => {\n  const authors = utils.getChildElements(node, 'author');\n  return authors.map(author => ({\n    name: utils.getElementTextContent(author, 'name')\n  }));\n};\n\nconst getChannelLastUpdated = node => utils.getElementTextContent(node, 'updated');\n\nconst getChannelLastPublished = node => utils.getElementTextContent(node, 'published');\n\nconst getChannelCategories = node => {\n  const categories = utils.getChildElements(node, 'category');\n  return categories.map(category => ({\n    name: category.getAttribute('term')\n  }));\n};\n\nconst getChannelImage = node => {\n  let img = utils.getElementTextContent(node, 'image');\n\n  if (img === '' || img === undefined) {\n    img = utils.getElementTextContent(node, 'logo');\n  }\n\n  if (img === '' || img === undefined) {\n    img = utils.getElementTextContent(node, 'icon');\n  }\n\n  return {\n    url: img,\n    title: undefined,\n    description: undefined,\n    width: undefined,\n    height: undefined\n  };\n};\n\nconst getItemTitle = node => utils.getElementTextContent(node, 'title');\n\nconst getItemLinks = node => {\n  const links = utils.getChildElements(node, 'link');\n  const linksWithoutEnclosures = links.filter(link => link.getAttribute('rel') !== 'enclosure');\n  return linksWithoutEnclosures.map(link => ({\n    url: link.getAttribute('href'),\n    rel: link.getAttribute('rel')\n  }));\n};\n\nconst getItemDescription = node => utils.getElementTextContent(node, 'summary');\n\nconst getItemContent = node => utils.getElementTextContent(node, 'content');\n\nconst getItemImage = node => utils.getElementTextContent(node, 'icon');\n\nconst getItemAuthors = node => {\n  const authors = utils.getChildElements(node, 'author');\n  return authors.map(author => ({\n    name: utils.getElementTextContent(author, 'name')\n  }));\n};\n\nconst getItemCategories = node => {\n  const categories = utils.getChildElements(node, 'category');\n  return categories.map(category => ({\n    name: category.getAttribute('term')\n  }));\n};\n\nconst getItemPublished = node => {\n  let pub = utils.getElementTextContent(node, 'updated');\n\n  if (pub === '' || pub === undefined) {\n    pub = utils.getElementTextContent(node, 'published');\n  }\n\n  return pub;\n};\n\nconst getItemId = node => utils.getElementTextContent(node, 'id');\n\nconst getItemEnclosures = node => {\n  const links = utils.getChildElements(node, 'link');\n  const enclosureLinks = links.filter(link => link.getAttribute('rel') === 'enclosure');\n  return enclosureLinks.map(link => ({\n    url: link.getAttribute('href'),\n    length: link.getAttribute('length'),\n    mimeType: link.getAttribute('type')\n  }));\n};\n\nconst mapChannelFields = document => {\n  const channelNodes = utils.getElements(document, 'feed');\n\n  if (!channelNodes || channelNodes.length === 0) {\n    throw new Error('Could not find channel node');\n  }\n\n  const channelNode = channelNodes[0];\n  return {\n    title: getChannelTitle(channelNode),\n    links: getChannelLinks(channelNode),\n    description: getChannelDescription(channelNode),\n    copyright: getChannelCopyright(channelNode),\n    authors: getChannelAuthors(channelNode),\n    lastUpdated: getChannelLastUpdated(channelNode),\n    lastPublished: getChannelLastPublished(channelNode),\n    categories: getChannelCategories(channelNode),\n    image: getChannelImage(channelNode),\n    itunes: itunesParser.parseChannel(channelNode)\n  };\n};\n\nconst mapItems = document => {\n  const itemNodes = utils.getElements(document, 'entry');\n  return itemNodes.map(item => ({\n    title: getItemTitle(item),\n    links: getItemLinks(item),\n    description: getItemDescription(item),\n    id: getItemId(item),\n    imageUrl: getItemImage(item),\n    content: getItemContent(item),\n    authors: getItemAuthors(item),\n    categories: getItemCategories(item),\n    published: getItemPublished(item),\n    enclosures: getItemEnclosures(item),\n    itunes: itunesParser.parseItem(item)\n  }));\n};\n\nexports.parse = document => ({ ...model.rss,\n  type: 'atom-v1',\n  ...mapChannelFields(document),\n  items: mapItems(document)\n});","map":{"version":3,"sources":["D:/GIT/Plateforme_Esport/node_modules/react-native-rss-parser/parsers/atomv1.js"],"names":["utils","require","model","itunesParser","getChannelTitle","node","getElementTextContent","getChannelLinks","links","getChildElements","map","link","url","getAttribute","rel","getChannelDescription","getChannelCopyright","getChannelAuthors","authors","author","name","getChannelLastUpdated","getChannelLastPublished","getChannelCategories","categories","category","getChannelImage","img","undefined","title","description","width","height","getItemTitle","getItemLinks","linksWithoutEnclosures","filter","getItemDescription","getItemContent","getItemImage","getItemAuthors","getItemCategories","getItemPublished","pub","getItemId","getItemEnclosures","enclosureLinks","length","mimeType","mapChannelFields","document","channelNodes","getElements","Error","channelNode","copyright","lastUpdated","lastPublished","image","itunes","parseChannel","mapItems","itemNodes","item","id","imageUrl","content","published","enclosures","parseItem","exports","parse","rss","type","items"],"mappings":"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","sourcesContent":["const utils = require('./utils');\r\nconst model = require('../model/rss');\r\nconst itunesParser = require('./itunes');\r\n\r\nconst getChannelTitle = (node) => utils.getElementTextContent(node, 'title');\r\n\r\nconst getChannelLinks = (node) => {\r\n  const links = utils.getChildElements(node, 'link');\r\n\r\n  return links.map((link) => ({\r\n    url: link.getAttribute('href'),\r\n    rel: link.getAttribute('rel'),\r\n  }));\r\n};\r\n\r\nconst getChannelDescription = (node) =>\r\n  utils.getElementTextContent(node, 'subtitle');\r\n\r\nconst getChannelCopyright = (node) =>\r\n  utils.getElementTextContent(node, 'rights');\r\n\r\nconst getChannelAuthors = (node) => {\r\n  const authors = utils.getChildElements(node, 'author');\r\n\r\n  return authors.map((author) => ({\r\n    name: utils.getElementTextContent(author, 'name'),\r\n  }));\r\n};\r\n\r\nconst getChannelLastUpdated = (node) =>\r\n  utils.getElementTextContent(node, 'updated');\r\n\r\nconst getChannelLastPublished = (node) =>\r\n  utils.getElementTextContent(node, 'published');\r\n\r\nconst getChannelCategories = (node) => {\r\n  const categories = utils.getChildElements(node, 'category');\r\n\r\n  return categories.map((category) => ({\r\n    name: category.getAttribute('term'),\r\n  }));\r\n};\r\n\r\nconst getChannelImage = (node) => {\r\n  let img = utils.getElementTextContent(node, 'image');\r\n\r\n  if (img === '' || img === undefined) {\r\n    img = utils.getElementTextContent(node, 'logo');\r\n  }\r\n\r\n  if (img === '' || img === undefined) {\r\n    img = utils.getElementTextContent(node, 'icon');\r\n  }\r\n\r\n  return {\r\n    url: img,\r\n    title: undefined,\r\n    description: undefined,\r\n    width: undefined,\r\n    height: undefined,\r\n  };\r\n};\r\n\r\nconst getItemTitle = (node) => utils.getElementTextContent(node, 'title');\r\n\r\nconst getItemLinks = (node) => {\r\n  const links = utils.getChildElements(node, 'link');\r\n  const linksWithoutEnclosures = links.filter(\r\n    (link) => link.getAttribute('rel') !== 'enclosure'\r\n  );\r\n\r\n  return linksWithoutEnclosures.map((link) => ({\r\n    url: link.getAttribute('href'),\r\n    rel: link.getAttribute('rel'),\r\n  }));\r\n};\r\n\r\nconst getItemDescription = (node) =>\r\n  utils.getElementTextContent(node, 'summary');\r\n\r\nconst getItemContent = (node) => utils.getElementTextContent(node, 'content');\r\n\r\nconst getItemImage = (node) => utils.getElementTextContent(node, 'icon');\r\n\r\nconst getItemAuthors = (node) => {\r\n  const authors = utils.getChildElements(node, 'author');\r\n\r\n  return authors.map((author) => ({\r\n    name: utils.getElementTextContent(author, 'name'),\r\n  }));\r\n};\r\n\r\nconst getItemCategories = (node) => {\r\n  const categories = utils.getChildElements(node, 'category');\r\n\r\n  return categories.map((category) => ({\r\n    name: category.getAttribute('term'),\r\n  }));\r\n};\r\n\r\nconst getItemPublished = (node) => {\r\n  let pub = utils.getElementTextContent(node, 'updated');\r\n\r\n  if (pub === '' || pub === undefined) {\r\n    pub = utils.getElementTextContent(node, 'published');\r\n  }\r\n\r\n  return pub;\r\n};\r\n\r\nconst getItemId = (node) => utils.getElementTextContent(node, 'id');\r\n\r\nconst getItemEnclosures = (node) => {\r\n  const links = utils.getChildElements(node, 'link');\r\n  const enclosureLinks = links.filter(\r\n    (link) => link.getAttribute('rel') === 'enclosure'\r\n  );\r\n\r\n  return enclosureLinks.map((link) => ({\r\n    url: link.getAttribute('href'),\r\n    length: link.getAttribute('length'),\r\n    mimeType: link.getAttribute('type'),\r\n  }));\r\n};\r\n\r\nconst mapChannelFields = (document) => {\r\n  const channelNodes = utils.getElements(document, 'feed');\r\n\r\n  if (!channelNodes || channelNodes.length === 0) {\r\n    throw new Error('Could not find channel node');\r\n  }\r\n\r\n  const channelNode = channelNodes[0];\r\n\r\n  return {\r\n    title: getChannelTitle(channelNode),\r\n    links: getChannelLinks(channelNode),\r\n    description: getChannelDescription(channelNode),\r\n    copyright: getChannelCopyright(channelNode),\r\n    authors: getChannelAuthors(channelNode),\r\n    lastUpdated: getChannelLastUpdated(channelNode),\r\n    lastPublished: getChannelLastPublished(channelNode),\r\n    categories: getChannelCategories(channelNode),\r\n    image: getChannelImage(channelNode),\r\n    itunes: itunesParser.parseChannel(channelNode),\r\n  };\r\n};\r\n\r\nconst mapItems = (document) => {\r\n  const itemNodes = utils.getElements(document, 'entry');\r\n\r\n  return itemNodes.map((item) => ({\r\n    title: getItemTitle(item),\r\n    links: getItemLinks(item),\r\n    description: getItemDescription(item),\r\n    id: getItemId(item),\r\n    imageUrl: getItemImage(item),\r\n    content: getItemContent(item),\r\n    authors: getItemAuthors(item),\r\n    categories: getItemCategories(item),\r\n    published: getItemPublished(item),\r\n    enclosures: getItemEnclosures(item),\r\n    itunes: itunesParser.parseItem(item),\r\n  }));\r\n};\r\n\r\nexports.parse = (document) => ({\r\n  ...model.rss,\r\n  type: 'atom-v1',\r\n  ...mapChannelFields(document),\r\n  items: mapItems(document),\r\n});\r\n"]},"metadata":{},"sourceType":"script"}